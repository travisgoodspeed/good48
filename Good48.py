#!/usr/bin/env python

# (C) 2013 Travis Goodspeed <travis at radiantmachines.com>

# Libraries for working with the HP48-series over Bluetooth.  Likely
# to be selfishly restricted to my HP50G unless I hear that other
# neighbors are using the code.

import bluetooth, sys;

class Good48:
    """Communication class for speaking to my HP50G over Bluetooth."""
    def __init__(self,btaddr="00:06:66:42:8B:31"):
        if btaddr==None or btaddr=="none" or btaddr=="bluetooth":
            print "performing inquiry..."
            nearby_devices = bluetooth.discover_devices(lookup_names = True)
            print "found %d devices" % len(nearby_devices)
            for addr, name in nearby_devices:
                print "  %s - '%s'" % (addr, name)
                #TODO switch to wildcards.                                                                
                if name=='FireFly-A6BD':
                    btaddr=addr;
                if name=='RN42-8B31':
                    btaddr=addr;
        port=1
        
        sys.stderr.write("Connecting to %s on port %i.\n" % (btaddr, port));
        sock=bluetooth.BluetoothSocket(bluetooth.RFCOMM);
        self.sock=sock;
        sock.connect((btaddr,port));
        sock.settimeout(10);  #IMPORTANT Must be patient.
        
        sys.stderr.write("Connected.\n")
        
    def write(self,msg):
        """Send traffic."""
        import time;
        self.sock.send(msg);
        #time.sleep(0.1);
        return;
    def read(self,length):
        """Read traffic."""
        data="";
        try:
            while len(data)<length:
                data=data+self.sock.recv(length-len(data));
        except bluetooth.btcommon.BluetoothError:
            pass;
        return data;


class Good48PrintBufferPBM:
    """Print buffer that outputs to PBM."""
    rows=0;
    cols=166;
    pixels=[];
    nextline=[];
    def getPBM(self):
        pbm="""P1
#Generated by Good48, an HP Calculator library in Python.
%i %i
""" % (self.cols,self.rows)
        col=0;
        for p in self.pixels:
            pbm=pbm+("%i " % p);
            col=col+1;
            if col==166:
                col=0;
                pbm=pbm+"\n";
        return pbm;
        
    def reset(self):
        #print "I forgot to hook reset().";
        pass;
    def selftest(self):
        #print "I forgot to hook reset().";
        pass;
    def drawchar(self,c):
        sys.stderr.write( "%c" % c);
        pass;
    def drawcol(self,char):
        #print "I should paint %02x as image data." % char;
        self.nextline=self.nextline+[char];
        pass;
    def _drawline(self,line):
        for r in range(0,8):
            b=(1<<r);
            col=0;
            for c in line:
                if b&c>0:
                    self.pixels=self.pixels+[1];
                else:
                    self.pixels=self.pixels+[0];
                col=col+1;
            while col<self.cols:
                self.pixels=self.pixels+[1];
                col=col+1;
            self.rows=self.rows+1;
    def lfgraph(self):
        sys.stderr.write( "I should do a graphical newline.  Doing a text one instead.\n");
        #sys.exit(1);
        self.lftext();
        pass;
    def lftext(self):
        #print "I should do a text newline.";
        #print self.nextline;
        self._drawline(self.nextline);
        self.nextline=[];
        pass;

class Good48PrintBuffer:
    """Empty print buffer for sublcassing."""
    def reset(self):
        print "I forgot to hook reset().";
    def selftest(self):
        print "I forgot to hook selftest().";
    def drawchar(self,c):
        sys.stdout.write("%c" % c);
    def drawcol(self,char):
        print "I should paint %02x as image data." % char;
    def lfgraph(self):
        print "I should do a graphical newline.";
    def lftext(self):
        print "I should do a text newline.";

class Good48Printer:
    """Class that parses HP82240B traffic, rendering it as needed."""
    doublewidth=False;
    font="Roman8";
    underlining=False;
    
    state=0;
    #0 text
    #1 escaped by 1B
    #2 graphics mode.
    colsleft=0;
    
    log="";
    def __init__(self,printbuf):
        self.buf=printbuf;
    def handle(self,text=""):
        self.log=self.log+text;
        for b in text:
            self.handlechar(ord(b));
    def handlechar(self,b):
        if self.state==0:   #Idle/Text Mode
            if b==0x04:     self.buf.lfgraph();
            elif b==0x0a:   self.buf.lftext();
            elif b==0x00:   pass; #Space, maybe?
            elif b==0x1b:
                self.state=1;
            else:
                self.buf.drawchar(chr(b));
        elif self.state==1:  #Escaped by 1B.
            if b<=166:
                self.state=2;
                self.colsleft=b;
            else:
                print "Unhandled escape code 1B%02X" % b;
                self.state=0;
        elif self.state==2:
            self.buf.drawcol(b);
            self.colsleft=self.colsleft-1;
            if self.colsleft==0:
                self.state=0;
